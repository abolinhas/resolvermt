// Code generated by MockGen. DO NOT EDIT.
// Source: resolverlist.go

// Package multidns is a generated GoMock package.
package multidns

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockresolverList is a mock of resolverList interface.
type MockresolverList struct {
	ctrl     *gomock.Controller
	recorder *MockresolverListMockRecorder
}

// MockresolverListMockRecorder is the mock recorder for MockresolverList.
type MockresolverListMockRecorder struct {
	mock *MockresolverList
}

// NewMockresolverList creates a new mock instance.
func NewMockresolverList(ctrl *gomock.Controller) *MockresolverList {
	mock := &MockresolverList{ctrl: ctrl}
	mock.recorder = &MockresolverListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockresolverList) EXPECT() *MockresolverListMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockresolverList) Count() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockresolverListMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockresolverList)(nil).Count))
}

// GetNextResolver mocks base method.
func (m *MockresolverList) GetNextResolver() resolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextResolver")
	ret0, _ := ret[0].(resolver)
	return ret0
}

// GetNextResolver indicates an expected call of GetNextResolver.
func (mr *MockresolverListMockRecorder) GetNextResolver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextResolver", reflect.TypeOf((*MockresolverList)(nil).GetNextResolver))
}
