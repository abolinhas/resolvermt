// Code generated by MockGen. DO NOT EDIT.
// Source: resolver.go

// Package multidns is a generated GoMock package.
package multidns

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	dns "github.com/miekg/dns"
)

// Mockbalancer is a mock of balancer interface.
type Mockbalancer struct {
	ctrl     *gomock.Controller
	recorder *MockbalancerMockRecorder
}

// MockbalancerMockRecorder is the mock recorder for Mockbalancer.
type MockbalancerMockRecorder struct {
	mock *Mockbalancer
}

// NewMockbalancer creates a new mock instance.
func NewMockbalancer(ctrl *gomock.Controller) *Mockbalancer {
	mock := &Mockbalancer{ctrl: ctrl}
	mock.recorder = &MockbalancerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockbalancer) EXPECT() *MockbalancerMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *Mockbalancer) Next() server {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(server)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockbalancerMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*Mockbalancer)(nil).Next))
}

// Mocksender is a mock of sender interface.
type Mocksender struct {
	ctrl     *gomock.Controller
	recorder *MocksenderMockRecorder
}

// MocksenderMockRecorder is the mock recorder for Mocksender.
type MocksenderMockRecorder struct {
	mock *Mocksender
}

// NewMocksender creates a new mock instance.
func NewMocksender(ctrl *gomock.Controller) *Mocksender {
	mock := &Mocksender{ctrl: ctrl}
	mock.recorder = &MocksenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocksender) EXPECT() *MocksenderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *Mocksender) Send(resolver string) (*dns.Msg, time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", resolver)
	ret0, _ := ret[0].(*dns.Msg)
	ret1, _ := ret[1].(time.Duration)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Send indicates an expected call of Send.
func (mr *MocksenderMockRecorder) Send(resolver interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*Mocksender)(nil).Send), resolver)
}

// MockmessageParser is a mock of messageParser interface.
type MockmessageParser struct {
	ctrl     *gomock.Controller
	recorder *MockmessageParserMockRecorder
}

// MockmessageParserMockRecorder is the mock recorder for MockmessageParser.
type MockmessageParserMockRecorder struct {
	mock *MockmessageParser
}

// NewMockmessageParser creates a new mock instance.
func NewMockmessageParser(ctrl *gomock.Controller) *MockmessageParser {
	mock := &MockmessageParser{ctrl: ctrl}
	mock.recorder = &MockmessageParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmessageParser) EXPECT() *MockmessageParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockmessageParser) Parse(query string, msg *dns.Msg) []Record {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", query, msg)
	ret0, _ := ret[0].([]Record)
	return ret0
}

// Parse indicates an expected call of Parse.
func (mr *MockmessageParserMockRecorder) Parse(query, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockmessageParser)(nil).Parse), query, msg)
}
