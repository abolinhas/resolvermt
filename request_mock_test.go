// Code generated by MockGen. DO NOT EDIT.
// Source: request.go

// Package multidns is a generated GoMock package.
package multidns

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	dns "github.com/miekg/dns"
)

// Mockrequest is a mock of request interface.
type Mockrequest struct {
	ctrl     *gomock.Controller
	recorder *MockrequestMockRecorder
}

// MockrequestMockRecorder is the mock recorder for Mockrequest.
type MockrequestMockRecorder struct {
	mock *Mockrequest
}

// NewMockrequest creates a new mock instance.
func NewMockrequest(ctrl *gomock.Controller) *Mockrequest {
	mock := &Mockrequest{ctrl: ctrl}
	mock.recorder = &MockrequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrequest) EXPECT() *MockrequestMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *Mockrequest) Send(resolver string) (*dns.Msg, time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", resolver)
	ret0, _ := ret[0].(*dns.Msg)
	ret1, _ := ret[1].(time.Duration)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Send indicates an expected call of Send.
func (mr *MockrequestMockRecorder) Send(resolver interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*Mockrequest)(nil).Send), resolver)
}
