// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_multidns is a generated GoMock package.
package mock_multidns

import (
	reflect "reflect"
	time "time"

	multidns "github.com/d3mondev/multidns"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Resolve mocks base method.
func (m *MockClient) Resolve(domains []string, rrtype multidns.RRtype) []multidns.Record {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", domains, rrtype)
	ret0, _ := ret[0].([]multidns.Record)
	return ret0
}

// Resolve indicates an expected call of Resolve.
func (mr *MockClientMockRecorder) Resolve(domains, rrtype interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockClient)(nil).Resolve), domains, rrtype)
}

// Mockdoer is a mock of doer interface.
type Mockdoer struct {
	ctrl     *gomock.Controller
	recorder *MockdoerMockRecorder
}

// MockdoerMockRecorder is the mock recorder for Mockdoer.
type MockdoerMockRecorder struct {
	mock *Mockdoer
}

// NewMockdoer creates a new mock instance.
func NewMockdoer(ctrl *gomock.Controller) *Mockdoer {
	mock := &Mockdoer{ctrl: ctrl}
	mock.recorder = &MockdoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockdoer) EXPECT() *MockdoerMockRecorder {
	return m.recorder
}

// Resolve mocks base method.
func (m *Mockdoer) Resolve(query string, rrtype multidns.RRtype, channel chan []multidns.Record) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Resolve", query, rrtype, channel)
}

// Resolve indicates an expected call of Resolve.
func (mr *MockdoerMockRecorder) Resolve(query, rrtype, channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*Mockdoer)(nil).Resolve), query, rrtype, channel)
}

// Mocksleeper is a mock of sleeper interface.
type Mocksleeper struct {
	ctrl     *gomock.Controller
	recorder *MocksleeperMockRecorder
}

// MocksleeperMockRecorder is the mock recorder for Mocksleeper.
type MocksleeperMockRecorder struct {
	mock *Mocksleeper
}

// NewMocksleeper creates a new mock instance.
func NewMocksleeper(ctrl *gomock.Controller) *Mocksleeper {
	mock := &Mocksleeper{ctrl: ctrl}
	mock.recorder = &MocksleeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocksleeper) EXPECT() *MocksleeperMockRecorder {
	return m.recorder
}

// Sleep mocks base method.
func (m *Mocksleeper) Sleep(t time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Sleep", t)
}

// Sleep indicates an expected call of Sleep.
func (mr *MocksleeperMockRecorder) Sleep(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sleep", reflect.TypeOf((*Mocksleeper)(nil).Sleep), t)
}
